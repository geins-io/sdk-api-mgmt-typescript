/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SharedModelsLocalizableContent } from './SharedModelsLocalizableContent';
import {
    SharedModelsLocalizableContentFromJSON,
    SharedModelsLocalizableContentFromJSONTyped,
    SharedModelsLocalizableContentToJSON,
} from './SharedModelsLocalizableContent';

/**
 * A product parameter to create or update.
 * @export
 * @interface ProductParameterModelsWriteProductParameter
 */
export interface ProductParameterModelsWriteProductParameter {
    /**
     * The unique identifier for the parameter.
     * @type {number}
     * @memberof ProductParameterModelsWriteProductParameter
     */
    parameterId?: number;
    /**
     * The unique identifier of the group that this parameter belongs to.
     * @type {number}
     * @memberof ProductParameterModelsWriteProductParameter
     */
    groupId?: number;
    /**
     * The type of parameter.  
     * 1 = String. Any string value.  
     * 2 = Float. Any floating point number.  
     *             Period as decimal separator and no thousands separator.  
     *             Eg: 10001.789.  
     * 3 = DateTime. Any ISO 8601 date.  
     *             Eg: 2017-03-06T16:31:24+02:00.  
     * 4 = Multi. A string value from a predefined set of values.  
     *             This type may occur multiple times for the same parameter.  
     * 5 = Single. A string value from a predefined set of values.  
     * 6 = Headline. A string value used mainly for grouping in layout.  
     * 7 = Tags. A pipe-separated list of product specific values.  
     *             Eg: red|green|blue.
     * @type {number}
     * @memberof ProductParameterModelsWriteProductParameter
     */
    parameterType?: ProductParameterModelsWriteProductParameterParameterTypeEnum;
    /**
     * The non-localized name of the parameter.
     * @type {string}
     * @memberof ProductParameterModelsWriteProductParameter
     */
    name?: string;
    /**
     * The localized names of the parameter.
     * @type {Array<SharedModelsLocalizableContent>}
     * @memberof ProductParameterModelsWriteProductParameter
     */
    localizedNames?: Array<SharedModelsLocalizableContent>;
}


/**
 * @export
 */
export const ProductParameterModelsWriteProductParameterParameterTypeEnum = {
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;
export type ProductParameterModelsWriteProductParameterParameterTypeEnum = typeof ProductParameterModelsWriteProductParameterParameterTypeEnum[keyof typeof ProductParameterModelsWriteProductParameterParameterTypeEnum];


/**
 * Check if a given object implements the ProductParameterModelsWriteProductParameter interface.
 */
export function instanceOfProductParameterModelsWriteProductParameter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProductParameterModelsWriteProductParameterFromJSON(json: any): ProductParameterModelsWriteProductParameter {
    return ProductParameterModelsWriteProductParameterFromJSONTyped(json, false);
}

export function ProductParameterModelsWriteProductParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductParameterModelsWriteProductParameter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parameterId': !exists(json, 'ParameterId') ? undefined : json['ParameterId'],
        'groupId': !exists(json, 'GroupId') ? undefined : json['GroupId'],
        'parameterType': !exists(json, 'ParameterType') ? undefined : json['ParameterType'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'localizedNames': !exists(json, 'LocalizedNames') ? undefined : ((json['LocalizedNames'] as Array<any>).map(SharedModelsLocalizableContentFromJSON)),
    };
}

export function ProductParameterModelsWriteProductParameterToJSON(value?: ProductParameterModelsWriteProductParameter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ParameterId': value.parameterId,
        'GroupId': value.groupId,
        'ParameterType': value.parameterType,
        'Name': value.name,
        'LocalizedNames': value.localizedNames === undefined ? undefined : ((value.localizedNames as Array<any>).map(SharedModelsLocalizableContentToJSON)),
    };
}

