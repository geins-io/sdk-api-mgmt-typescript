/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Payment details for an order.
 * @export
 * @interface OrderModelsPaymentDetail
 */
export interface OrderModelsPaymentDetail {
    /**
     * Unique identifier for this payment detail.  
     * Exception: For some payment options this field can be 0. These orders only have one payment detail.
     * @type {number}
     * @memberof OrderModelsPaymentDetail
     */
    id?: number;
    /**
     * Payment method id.
     * @type {number}
     * @memberof OrderModelsPaymentDetail
     */
    paymentId?: number;
    /**
     * The name of the payment method.
     * @type {string}
     * @memberof OrderModelsPaymentDetail
     */
    name?: string;
    /**
     * The display name of the payment method.
     * @type {string}
     * @memberof OrderModelsPaymentDetail
     */
    displayName?: string;
    /**
     * The transaction id (external reference).
     * @type {string}
     * @memberof OrderModelsPaymentDetail
     */
    transactionId?: string;
    /**
     * The secondary transaction id, if any (external reference).
     * @type {string}
     * @memberof OrderModelsPaymentDetail
     */
    secondaryTransactionId?: string;
    /**
     * The reservation number. This field is not available for all payment methods.
     * @type {string}
     * @memberof OrderModelsPaymentDetail
     */
    reservationNumber?: string;
    /**
     * Reservation date.
     * @type {Date}
     * @memberof OrderModelsPaymentDetail
     */
    reservationDate?: Date;
    /**
     * The date all captures have been processed.
     * @type {Date}
     * @memberof OrderModelsPaymentDetail
     */
    paymentDate?: Date;
    /**
     * Total.
     * @type {number}
     * @memberof OrderModelsPaymentDetail
     */
    total?: number;
    /**
     * True if all captures have been processed.
     * @type {boolean}
     * @memberof OrderModelsPaymentDetail
     */
    payed?: boolean;
    /**
     * The payment fee.
     * @type {number}
     * @memberof OrderModelsPaymentDetail
     */
    paymentFee?: number;
    /**
     * The shipping fee.
     * @type {number}
     * @memberof OrderModelsPaymentDetail
     */
    shippingFee?: number;
    /**
     * The name of the payment option, if any.  
     * This doesn't have to be the same as the payment name. Eg "Direct bank payment", "Card", "Invoice" etc.
     * @type {string}
     * @memberof OrderModelsPaymentDetail
     */
    paymentOption?: string;
}

/**
 * Check if a given object implements the OrderModelsPaymentDetail interface.
 */
export function instanceOfOrderModelsPaymentDetail(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderModelsPaymentDetailFromJSON(json: any): OrderModelsPaymentDetail {
    return OrderModelsPaymentDetailFromJSONTyped(json, false);
}

export function OrderModelsPaymentDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderModelsPaymentDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'paymentId': !exists(json, 'PaymentId') ? undefined : json['PaymentId'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'displayName': !exists(json, 'DisplayName') ? undefined : json['DisplayName'],
        'transactionId': !exists(json, 'TransactionId') ? undefined : json['TransactionId'],
        'secondaryTransactionId': !exists(json, 'SecondaryTransactionId') ? undefined : json['SecondaryTransactionId'],
        'reservationNumber': !exists(json, 'ReservationNumber') ? undefined : json['ReservationNumber'],
        'reservationDate': !exists(json, 'ReservationDate') ? undefined : (new Date(json['ReservationDate'])),
        'paymentDate': !exists(json, 'PaymentDate') ? undefined : (new Date(json['PaymentDate'])),
        'total': !exists(json, 'Total') ? undefined : json['Total'],
        'payed': !exists(json, 'Payed') ? undefined : json['Payed'],
        'paymentFee': !exists(json, 'PaymentFee') ? undefined : json['PaymentFee'],
        'shippingFee': !exists(json, 'ShippingFee') ? undefined : json['ShippingFee'],
        'paymentOption': !exists(json, 'PaymentOption') ? undefined : json['PaymentOption'],
    };
}

export function OrderModelsPaymentDetailToJSON(value?: OrderModelsPaymentDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'PaymentId': value.paymentId,
        'Name': value.name,
        'DisplayName': value.displayName,
        'TransactionId': value.transactionId,
        'SecondaryTransactionId': value.secondaryTransactionId,
        'ReservationNumber': value.reservationNumber,
        'ReservationDate': value.reservationDate === undefined ? undefined : (value.reservationDate.toISOString()),
        'PaymentDate': value.paymentDate === undefined ? undefined : (value.paymentDate.toISOString()),
        'Total': value.total,
        'Payed': value.payed,
        'PaymentFee': value.paymentFee,
        'ShippingFee': value.shippingFee,
        'PaymentOption': value.paymentOption,
    };
}

