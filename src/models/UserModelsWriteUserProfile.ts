/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserModelsWriteUserProfile
 */
export interface UserModelsWriteUserProfile {
    /**
     * 
     * @type {number}
     * @memberof UserModelsWriteUserProfile
     */
    siteId?: number;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    phoneNr?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    mobilePhoneNr?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    company?: string;
    /**
     * 
     * @type {number}
     * @memberof UserModelsWriteUserProfile
     */
    userTypeId?: number;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    address3?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    doorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    personalId?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    birthyear?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    zip?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    careOf?: string;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    country?: string;
    /**
     * 
     * @type {number}
     * @memberof UserModelsWriteUserProfile
     */
    countryId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserModelsWriteUserProfile
     */
    gender?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    password?: string;
    /**
     * Decides whether the user should be subscribed to the newsletter.
     * @type {boolean}
     * @memberof UserModelsWriteUserProfile
     */
    newsletter?: boolean;
    /**
     * Free-text field for any additional data that should be stored with the user.
     * @type {string}
     * @memberof UserModelsWriteUserProfile
     */
    metaData?: string;
}

/**
 * Check if a given object implements the UserModelsWriteUserProfile interface.
 */
export function instanceOfUserModelsWriteUserProfile(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserModelsWriteUserProfileFromJSON(json: any): UserModelsWriteUserProfile {
    return UserModelsWriteUserProfileFromJSONTyped(json, false);
}

export function UserModelsWriteUserProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserModelsWriteUserProfile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'siteId': !exists(json, 'SiteId') ? undefined : json['SiteId'],
        'email': !exists(json, 'Email') ? undefined : json['Email'],
        'firstName': !exists(json, 'FirstName') ? undefined : json['FirstName'],
        'lastName': !exists(json, 'LastName') ? undefined : json['LastName'],
        'phoneNr': !exists(json, 'PhoneNr') ? undefined : json['PhoneNr'],
        'mobilePhoneNr': !exists(json, 'MobilePhoneNr') ? undefined : json['MobilePhoneNr'],
        'company': !exists(json, 'Company') ? undefined : json['Company'],
        'userTypeId': !exists(json, 'UserTypeId') ? undefined : json['UserTypeId'],
        'address': !exists(json, 'Address') ? undefined : json['Address'],
        'address2': !exists(json, 'Address2') ? undefined : json['Address2'],
        'address3': !exists(json, 'Address3') ? undefined : json['Address3'],
        'doorCode': !exists(json, 'DoorCode') ? undefined : json['DoorCode'],
        'personalId': !exists(json, 'PersonalId') ? undefined : json['PersonalId'],
        'birthyear': !exists(json, 'Birthyear') ? undefined : json['Birthyear'],
        'zip': !exists(json, 'Zip') ? undefined : json['Zip'],
        'city': !exists(json, 'City') ? undefined : json['City'],
        'careOf': !exists(json, 'CareOf') ? undefined : json['CareOf'],
        'country': !exists(json, 'Country') ? undefined : json['Country'],
        'countryId': !exists(json, 'CountryId') ? undefined : json['CountryId'],
        'gender': !exists(json, 'Gender') ? undefined : json['Gender'],
        'password': !exists(json, 'Password') ? undefined : json['Password'],
        'newsletter': !exists(json, 'Newsletter') ? undefined : json['Newsletter'],
        'metaData': !exists(json, 'MetaData') ? undefined : json['MetaData'],
    };
}

export function UserModelsWriteUserProfileToJSON(value?: UserModelsWriteUserProfile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'SiteId': value.siteId,
        'Email': value.email,
        'FirstName': value.firstName,
        'LastName': value.lastName,
        'PhoneNr': value.phoneNr,
        'MobilePhoneNr': value.mobilePhoneNr,
        'Company': value.company,
        'UserTypeId': value.userTypeId,
        'Address': value.address,
        'Address2': value.address2,
        'Address3': value.address3,
        'DoorCode': value.doorCode,
        'PersonalId': value.personalId,
        'Birthyear': value.birthyear,
        'Zip': value.zip,
        'City': value.city,
        'CareOf': value.careOf,
        'Country': value.country,
        'CountryId': value.countryId,
        'Gender': value.gender,
        'Password': value.password,
        'Newsletter': value.newsletter,
        'MetaData': value.metaData,
    };
}

