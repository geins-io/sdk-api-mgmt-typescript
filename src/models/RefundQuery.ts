/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Defines a query used to filter refunds. 
 * All properties are optional.
 * @export
 * @interface RefundQuery
 */
export interface RefundQuery {
    /**
     * Limits refunds to those created after this date.
     * @type {Date}
     * @memberof RefundQuery
     */
    createdAfter?: Date;
    /**
     * Limits refunds to those created before this date.
     * @type {Date}
     * @memberof RefundQuery
     */
    createdBefore?: Date;
    /**
     * Limits refunds to those approved after this date.
     * @type {Date}
     * @memberof RefundQuery
     */
    approvedAfter?: Date;
    /**
     * Limits refunds to those approved before this date.
     * @type {Date}
     * @memberof RefundQuery
     */
    approvedBefore?: Date;
    /**
     * Limits refunds to those updated after this date.
     * @type {Date}
     * @memberof RefundQuery
     */
    updatedAfter?: Date;
    /**
     * Limits refunds to those updated before this date.
     * @type {Date}
     * @memberof RefundQuery
     */
    updatedBefore?: Date;
    /**
     * Limits refunds to only those with any of the specified statuses.
     * 0 = All. Include all statuses.
     * 1 = Sent. Include refunds marked as sent.
     * 2 = Settled. Include refunds marked as settled.
     * 3 = SettledManually. Include refunds marked as manually settled.
     * 4 = Processed. Include refunds marked as processed.
     * 5 = Investigation. Include refunds marked for investigation.
     * 6 = Pending approval. Include refunds that are pending approval.
     * 7 = Approved. Include refunds that are approved.
     * Defaults to All if not set.
     * @type {Array<number>}
     * @memberof RefundQuery
     */
    includeStatuses?: Array<RefundQueryIncludeStatusesEnum>;
    /**
     * Limits refunds to only those without any of the specified statuses.
     * 1 = Sent. Exclude refunds marked as sent.
     * 2 = Settled. Exclude refunds marked as settled.
     * 3 = SettledManually. Exclude refunds marked as manually settled.
     * 4 = Processed. Exclude refunds marked as processed.
     * 5 = Investigation. Exclude refunds marked for investigation.
     * 6 = Pending approval. Exclude refunds that are pending approval.
     * 7 = Approved. Exclude refunds that are approved.
     * O or All is not valid as an exclude status and will not apply.
     * @type {Array<number>}
     * @memberof RefundQuery
     */
    excludeStatuses?: Array<RefundQueryExcludeStatusesEnum>;
}


/**
 * @export
 */
export const RefundQueryIncludeStatusesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;
export type RefundQueryIncludeStatusesEnum = typeof RefundQueryIncludeStatusesEnum[keyof typeof RefundQueryIncludeStatusesEnum];

/**
 * @export
 */
export const RefundQueryExcludeStatusesEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6,
    NUMBER_7: 7
} as const;
export type RefundQueryExcludeStatusesEnum = typeof RefundQueryExcludeStatusesEnum[keyof typeof RefundQueryExcludeStatusesEnum];


/**
 * Check if a given object implements the RefundQuery interface.
 */
export function instanceOfRefundQuery(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RefundQueryFromJSON(json: any): RefundQuery {
    return RefundQueryFromJSONTyped(json, false);
}

export function RefundQueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefundQuery {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAfter': !exists(json, 'CreatedAfter') ? undefined : (new Date(json['CreatedAfter'])),
        'createdBefore': !exists(json, 'CreatedBefore') ? undefined : (new Date(json['CreatedBefore'])),
        'approvedAfter': !exists(json, 'ApprovedAfter') ? undefined : (new Date(json['ApprovedAfter'])),
        'approvedBefore': !exists(json, 'ApprovedBefore') ? undefined : (new Date(json['ApprovedBefore'])),
        'updatedAfter': !exists(json, 'UpdatedAfter') ? undefined : (new Date(json['UpdatedAfter'])),
        'updatedBefore': !exists(json, 'UpdatedBefore') ? undefined : (new Date(json['UpdatedBefore'])),
        'includeStatuses': !exists(json, 'IncludeStatuses') ? undefined : json['IncludeStatuses'],
        'excludeStatuses': !exists(json, 'ExcludeStatuses') ? undefined : json['ExcludeStatuses'],
    };
}

export function RefundQueryToJSON(value?: RefundQuery | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'CreatedAfter': value.createdAfter === undefined ? undefined : (value.createdAfter.toISOString()),
        'CreatedBefore': value.createdBefore === undefined ? undefined : (value.createdBefore.toISOString()),
        'ApprovedAfter': value.approvedAfter === undefined ? undefined : (value.approvedAfter.toISOString()),
        'ApprovedBefore': value.approvedBefore === undefined ? undefined : (value.approvedBefore.toISOString()),
        'UpdatedAfter': value.updatedAfter === undefined ? undefined : (value.updatedAfter.toISOString()),
        'UpdatedBefore': value.updatedBefore === undefined ? undefined : (value.updatedBefore.toISOString()),
        'IncludeStatuses': value.includeStatuses,
        'ExcludeStatuses': value.excludeStatuses,
    };
}

