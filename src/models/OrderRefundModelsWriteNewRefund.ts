/* tslint:disable */
/* eslint-disable */
/**
 * Geins Management API
 *  Geins Management API is a RESTful api that powers your applications and helps you manage your Geins services. Geins provides an easy-to-use and scalable solution for managing all aspects of an online store, from product listings and customer information to order processing and payment transactions.   :::tip Tip With this API, you can build custom applications and integrate with third-party systems, feeds, dashboards and other bussiness logic apps. :::    ## Getting started Once you have created an account, you can start using the Management API by creating an `API User`. You can create as many API users as you need. Each `API user` is connected to a specific account so you can keep track of operations and manage keys.   You can find all your API credentials in `Geins Merchant Center`.   ### Fast track Use one of our [SDKs](https://docs.geins.io/docs/sdk/introduction) to get started quickly. The SDKs are available for the most popular programming languages and frameworks.  Or, if you prefer to just take it for a test run:  [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553?action=collection%2Ffork&collection-url=entityId%3D25895885-aaf6598f-1a7c-4949-85d7-ba846c42d553%26entityType%3Dcollection%26workspaceId%3Da2a179ce-158e-46b0-8d06-e9640f45112c)  ### Authentication Two authentication methods are required:   - `Basic Auth`   - `API Key`    All API credentials can be found in `Geins Merchant Center`.  #### Basic Auth A Basic auth `Authorization` header needs to be included in every request. The value should be `Basic <credentials>` where `<credentials>` is the Base64 encoding of your `API username` and `API password` joined by a single colon `:`.   See [Wikipedia](https://en.wikipedia.org/wiki/Basic_access_authentication) for more information on Basic auth.  #### API Key  An `X-ApiKey` header needs to be included in every request. This header should contain the value of your `API key`.  #### Example ```bash curl -X GET \"https://mgmtapi.geins.io/API/Market/List\" \\ -H \"Authorization: Basic [USER-CREDENTIALS-BASE64-ENCODED]\" \\ -H \"X-ApiKey: [API-KEY]\" ``` 
 *
 * The version of the OpenAPI document: v1.10.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderRefundModelsWriteNewRefund
 */
export interface OrderRefundModelsWriteNewRefund {
    /**
     * The order row that this refund row represents. Commonly used with returns.
     * Optional.
     * @type {number}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    orderRowId?: number;
    /**
     * An custom reference for the refund. 
     * Optional.
     * @type {string}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    reference?: string;
    /**
     * A description of the refund.
     * Optional.
     * @type {string}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    description?: string;
    /**
     * The name of author of the refund.
     * Optional.
     * @type {string}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    author?: string;
    /**
     * The refund amount.
     * Required.
     * @type {number}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    refundAmount?: number;
    /**
     * If true, will refund the amount to the customer's balance.
     * @type {boolean}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    toBalance?: boolean;
    /**
     * If true, the refund will be marked as settled immediatley and won't trigger a refund event.
     * This can be useful if the refund needs to be created retroactively, or when the money transacation has already occured.
     * @type {boolean}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    settled?: boolean;
    /**
     * What kind of source transaction the refund is derived from.
     * 0 = Default. A regular refund of the order or order row.
     * 1 = InstanceCost. Return cost type, used in drawing cost for instance.
     * 2 = Shipping. Refund shipping type, used to refund shipping.
     * 3 = InvoiceFee. Refund invoice fee.  
     * 0 = Default. A regular refund of the order or order row.  
     * 1 = InstanceCost. Return cost type, used in drawing cost for instance.  
     * 2 = Shipping. Refund shipping type, used to refund shipping.  
     * 3 = InvoiceFee. Refund invoice fee.
     * @type {number}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    refundType?: OrderRefundModelsWriteNewRefundRefundTypeEnum;
    /**
     * If true, will skip sending refund events.
     * @type {boolean}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    skipRefundEvents?: boolean;
    /**
     * If set to true, refunds will require approval before being sent. Only applies if Settled is false.
     * @type {boolean}
     * @memberof OrderRefundModelsWriteNewRefund
     */
    refundsRequireApproval?: boolean;
}


/**
 * @export
 */
export const OrderRefundModelsWriteNewRefundRefundTypeEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;
export type OrderRefundModelsWriteNewRefundRefundTypeEnum = typeof OrderRefundModelsWriteNewRefundRefundTypeEnum[keyof typeof OrderRefundModelsWriteNewRefundRefundTypeEnum];


/**
 * Check if a given object implements the OrderRefundModelsWriteNewRefund interface.
 */
export function instanceOfOrderRefundModelsWriteNewRefund(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OrderRefundModelsWriteNewRefundFromJSON(json: any): OrderRefundModelsWriteNewRefund {
    return OrderRefundModelsWriteNewRefundFromJSONTyped(json, false);
}

export function OrderRefundModelsWriteNewRefundFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderRefundModelsWriteNewRefund {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderRowId': !exists(json, 'OrderRowId') ? undefined : json['OrderRowId'],
        'reference': !exists(json, 'Reference') ? undefined : json['Reference'],
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'author': !exists(json, 'Author') ? undefined : json['Author'],
        'refundAmount': !exists(json, 'RefundAmount') ? undefined : json['RefundAmount'],
        'toBalance': !exists(json, 'ToBalance') ? undefined : json['ToBalance'],
        'settled': !exists(json, 'Settled') ? undefined : json['Settled'],
        'refundType': !exists(json, 'RefundType') ? undefined : json['RefundType'],
        'skipRefundEvents': !exists(json, 'SkipRefundEvents') ? undefined : json['SkipRefundEvents'],
        'refundsRequireApproval': !exists(json, 'RefundsRequireApproval') ? undefined : json['RefundsRequireApproval'],
    };
}

export function OrderRefundModelsWriteNewRefundToJSON(value?: OrderRefundModelsWriteNewRefund | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'OrderRowId': value.orderRowId,
        'Reference': value.reference,
        'Description': value.description,
        'Author': value.author,
        'RefundAmount': value.refundAmount,
        'ToBalance': value.toBalance,
        'Settled': value.settled,
        'RefundType': value.refundType,
        'SkipRefundEvents': value.skipRefundEvents,
        'RefundsRequireApproval': value.refundsRequireApproval,
    };
}

